<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE scenario SYSTEM "sipp.dtd">

<scenario name="ASTERISK-24335">
  <!--

  This scenario needs to get called with -pause_msg_ign to ignore both
  the valid 486 and the invalid 503 during the pause.

  If we retransmit the INVITE manually (using a second send), sipp will
  keep matching the 486 to the first 486 and we get stuck in an endless
  loop. Instead, we silently ignore the first 486 (and 503) and check
  the logs later to see if the 503 was received.

  -->

  <send retrans="500" start_txn="invite">
    <![CDATA[

      INVITE sip:[service]@voxbone.com SIP/2.0
      Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
      From: sipp <sip:test@voxbone.com>;tag=[call_number]
      To: sut <sip:[service]@voxbone.com:[remote_port]>
      Call-ID: [call_id]
      CSeq: 1 INVITE
      Contact: sip:sipp@[local_ip]:[local_port]
      Content-Type: application/sdp
      Content-Length: [len]

      v=0
      o=user1 53655765 2353687637 IN IP[local_ip_type] [local_ip]
      s=-
      c=IN IP[local_ip_type] [local_ip]
      t=0 0
      m=audio 9000 RTP/AVP 8
      a=rtpmap:8 PCMU/8000

    ]]>
  </send>

  <!-- Ensure at least one retransmit, which causes a 503 in broken
       asterisk. See: ASTERISK-24335. -->
  <pause milliseconds="550"/>
  
  <recv response="100" response_txn="invite" optional="true"></recv>

  <recv response="486" response_txn="invite"></recv>

  <!-- Properly shut down the transaction. -->
  <send ack_txn="invite">
    <![CDATA[

      ACK sip:[service]@voxbone.com SIP/2.0
      [last_Via:]   
      From: sipp <sip:test@voxbone.com>;tag=[call_number]
      To: sut <sip:[service]@voxbone.com:[remote_port]>[peer_tag_param]
      Call-ID: [call_id]
      CSeq: 1 ACK
      Content-Length: 0

    ]]>
  </send>

  <timewait milliseconds="1000"/>
</scenario>

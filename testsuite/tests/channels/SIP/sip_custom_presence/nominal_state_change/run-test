#!/usr/bin/env python
'''
Copyright (C) 2012, Digium, Inc.
Mark Michelson <mmichelson@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''
import sys
import os
import logging

sys.path.append("lib/python")

from asterisk.test_case import TestCase
from asterisk.sipp import SIPpScenario
from twisted.internet import reactor

logger = logging.getLogger(__name__)
TEST_DIR = os.path.dirname(os.path.realpath(__file__))

SIPP_SCENARIO =  {
    'scenario' : 'nominal.xml',
    '-p' : '5061',
    '-s' : 'bob',
}

class NominalStateChange(TestCase):
    def __init__(self):
        TestCase.__init__(self)
        self.create_asterisk()
        self.sipTest = SIPpScenario(TEST_DIR, SIPP_SCENARIO)
        self.sippPassed = False
        self.notifyPassed = False
        self.num_notifies = 0

    def sippComplete(self, result):
        self.sippPassed = True
        self.stop_reactor()

    def runSippTest(self):
        df = self.sipTest.run(self)
        df.addCallback(self.sippComplete)

        df = self.ami[0].originate(channel = "Local/away@default", application = "Echo")
        df.addErrback(self.handle_originate_failure)

    def inspectPresence(self, ami, event):
        # For this test, we expect two of these events.
        # First one is when the presence is changed.
        # Second one is when the subscribption is terminated.
        # Both should have the same values present.
        if event.get("state") != "DIGIUM_PRESENCE_SENT":
            return

        self.num_notifies = self.num_notifies + 1

        if self.num_notifies > 2:
            logger.error("Too many NOTIFYs!")
            self.notifyPassed = False
            ami.unregisterEvent("TestEvent")

        if event.get("presencestate") != "away":
            logger.error("Incorrect presencestate value!")
            self.notifyPassed = False
            ami.unregisterEvent("TestEvent")
        if event.get("subtype") != "down the hall":
            logger.error("Incorrect presence subtype!")
            self.notifyPassed = False
            ami.unregisterEvent("TestEvent")
        if event.get("message") != "Quarterly financial meeting":
            logger.error("Incorrect presence message!")
            self.notifyPassed = False
            ami.unregisterEvent("TestEvent")

        if self.num_notifies == 2:
            self.notifyPassed = True

    def stop_asterisk(self):
        ''' Kill the SIPp test if it didn't exit '''
        if not self.sipTest.exited:
            self.sipTest.kill()

    def ami_connect(self, ami):
        self.ast[ami.id].cli_exec("sip set debug on")
        ami.registerEvent("TestEvent", self.inspectPresence)
        self.runSippTest()

    def run(self):
        TestCase.run(self)
        self.create_ami_factory()

def main():
    test = NominalStateChange()
    reactor.run()
    if not test.sippPassed or not test.notifyPassed:
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)
